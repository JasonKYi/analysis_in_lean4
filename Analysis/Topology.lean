import Analysis.Filter

/-- A topological space on `Œ±` is predicate `is_open` on `Set Œ±` such that 
  - the whole set is open;
  - the intersection of two open sets is open; 
  - and the union of a collection of open sets is open. -/
class topologicalSpace (Œ± : Type u) where 
  is_open : Set Œ± ‚Üí Prop
  is_open_univ : is_open Set.univ
  is_open_inter : ‚àÄ s t, is_open s ‚Üí is_open t ‚Üí is_open (s ‚à© t)
  is_open_Union : ‚àÄ (s : Set (Set Œ±)) (hs : ‚àÄ t ‚àà s, is_open t), 
    is_open (‚ãÉ t ‚àà s, t)

-- Short hand so we don't need to write `topologicalSpace` all the time
def is_open [topologicalSpace Œ±] (s : Set Œ±) := topologicalSpace.is_open s 

def is_open_univ [topologicalSpace Œ±] : is_open (Set.univ : Set Œ±) := 
topologicalSpace.is_open_univ 

def is_open_inter [topologicalSpace Œ±] {s t : Set Œ±} 
  (hs : is_open s) (ht : is_open t) : is_open (s ‚à© t) := 
topologicalSpace.is_open_inter s t hs ht 

def is_open_Union [topologicalSpace Œ±] (s : Set (Set Œ±)) 
  (hs : ‚àÄ t ‚àà s, is_open t) : is_open (‚ãÉ t ‚àà s, t : Set Œ±) := 
topologicalSpace.is_open_Union s hs 

namespace topologicalSpace

open Set Filter

theorem ext (œÄ œÑ : topologicalSpace Œ±) (h : œÄ.is_open = œÑ.is_open) : œÄ = œÑ := by 
  cases œÄ; cases œÑ; subst h; rfl

variable [topologicalSpace Œ±]

theorem is_openEmpty : is_open (‚àÖ : Set Œ±) := sorry
-- UnionEmpty ‚ñ∏ is_open_Union ‚àÖ (Œª _ h => False.elim h)
/- ???
type mismatch
  is_open_Union EmptyCollection.emptyCollection
    fun (x : Set Œ±) (h : x ‚àà EmptyCollection.emptyCollection) => False.elim h
has type
  is_open (Union EmptyCollection.emptyCollection)
but is expected to have type
  is_open (Union EmptyCollection.emptyCollection)
-/

class Hausdorff (Œ± : Type u) [topologicalSpace Œ±] where
  t2 : ‚àÄ (x y : Œ±) (hxy : x ‚â† y), 
    ‚àÉ u v : Set Œ±, is_open u ‚àß is_open v ‚àß x ‚àà u ‚àß y ‚àà v ‚àß u ‚à© v = ‚àÖ 

section Hausdorff

variable [Hausdorff Œ±]

theorem t2 (x y : Œ±) (hxy : x ‚â† y) : 
  ‚àÉ u v : Set Œ±, is_open u ‚àß is_open v ‚àß x ‚àà u ‚àß y ‚àà v ‚àß u ‚à© v = ‚àÖ := 
Hausdorff.t2 x y hxy

-- /-- A filter `F` on a Hausdorff space `X` has at most one limit -/
theorem tendstoUnique {x y : Œ±} {F : Filter Œ±} [H : neBot F] 
  (hx : F ‚ü∂ x) (hy : F ‚ü∂ y) : x = y := by
  apply Classical.byContradiction 
  intro h
  cases t2 x y h with | Exists.intro u huv =>
  cases huv      with | Exists.intro v huv =>
  let ‚ü®hu‚ÇÅ, ‚ü®hv‚ÇÅ, ‚ü®hu‚ÇÇ, ‚ü®hv‚ÇÇ, huv‚ü©‚ü©‚ü©‚ü© := huv
  exact H.ne_bot <| (eqBotIff F).2 <| huv ‚ñ∏ inter_sets _ 
    (preimageId u ‚ñ∏ hx u ((memNeighbourhoodIff x u).2 hu‚ÇÇ)) 
    (preimageId v ‚ñ∏ hy v ((memNeighbourhoodIff y v).2 hv‚ÇÇ))

def aux (x y : Œ±) : Filter Œ± := 
  generatedFrom ((ùìù x) ‚äì ùìù y)

-- theorem auxTendsto (x y : Œ±) : aux x y ‚ü∂ x := by 
--   rw tendstoNeighberhoodIff
--   intro z hz
--   apply leGeneratedFrom ((ùìù x) ‚äì ùìù y)
--   skip; admit

def HausdorffOfTendstoUnique 
  (hF : ‚àÄ {F : Filter Œ±} x y (hy : F ‚ü∂ y) (hx : F ‚ü∂ x), x = y) : 
  Hausdorff Œ± := 
{ t2 := by 
    intros x y hxy
    apply Classical.byContradiction
    admit
    -- intro h
    -- apply hxy
    -- apply hF
    -- skip; admit
 }

end Hausdorff

end topologicalSpace